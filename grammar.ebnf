program    = function_gval*
function_gval = TYPE "*"* ident "(" (TYPE "*"* ident)* ")" "{" stmt* "}"
                | TYPE "*"* ident ("[" num "]")* "[]"?
                    ("=" ("{" (num ("," num)*)? "}") | num | string )? ";"
                | "enum" ident "{" ident ("," ident)* "}" ";"
                | "struct" ident "{" (TYPE ident ";")* "}" ";" # TODO
                | "typedef" TYPE ident ";" # TODO
stmt = { stmt* }
        | TYPE "*"* ident ("[" num "]")* "[]"?
            ("=" ("{" (num ("," num))? "}") | num | string )? ";"
        | "return" expr ";"
        | "if" "(" expr ")" stmt ("else" stmt)?
        | "switch"  "(" expr ")" "{"
            ((("case" (num | string)) | "default") ":" stmt*)* "}"
        | "while" "(" expr ")" stmt
        | "for" "(" expr? ";" expr? ";" expr? ")" stmt
        | "break" ";"
        | "continue" ";"
        | expr ";"
        | ";"
expr       = comma
comma      = assign ("," assign)*
assign     = condition (("=" | "+=" | "-=" | "*=" | "/="
            | "%=" | "&=" | "^=" | "|=" | "<<=" | ">>=") assign)?
condition  = logicOR ("?" expr ":" condition)? # 中央はカンマ演算子などもOK a?b,c:d → a?(b,c):d と解釈
logicOR    = logicAND ("||" logicAND)*
logicAND   = bitOR ("&&" bitOR)*
bitOR      = bitXOR ("|" bitXOR)*
bitXOR     = bitAND ("^" bitAND)*
bitAND     = equality ("&" equality)*
equality   = relational ("==" relational | "!=" relational)*
relational = shift (("<" | "<=" | ">" | ">=") shift)*
shift      = add ("<<" add | ">>" add)*
add        = mul ("+" mul | "-" mul)*
mul        = unary (("*" | "/" | "%") unary)*
unary      = ("sizeof" | "&" | "*" |
                | "!" | "~" | "++" | "--") unary  # ++ -- は前置
            |  ("+" | "-")? postpos
postpos    = primary ("[" expr "]")*
            ("++" | "--")?  # ++ -- は後置
primary    = "(" expr ")" | string
            | ident "(" (assign ("," assign)*)? ")" # commaとの衝突を避けるためassign
            | ident | num


# ↓TODO
TYPE       = ("int" | "char" | ("struct" ident)) "*"*


# postpos    = primary (("[" expr "]") || ("." ident) || ("->" ident))*
#             ("++" | "--")?  # ++ -- は後置

# unary      = | ("(" TYPE ")") unary