program    = function_gval*
function_gval = TYPE ident "(" (TYPE ident)* ")" "{" stmt* "}" # 関数定義
                | TYPE ident "(" (TYPE ident)* ")" ";" # プロトタイプ宣言
                | TYPE ident ("[" num "]")* "[]"?
                    ("=" ("{" (num ("," num)*)? "}") | num | string )? ";"
                | "extern" TYPE ident ("[" num "]")*
                | define_enum  ";"
                | define_struct ";"
                | "typedef" (TYPE | define_enum | define_struct) ident ";"
define_enum = "enum" ident "{" ident ("," ident)* "}"
define_struct = "struct" ident "{" (TYPE ident ";")* "}"
stmt = { stmt* }
        | TYPE ident ("[" num "]")* "[]"?
            ("=" ("{" (num ("," num))? "}") | num | string )? ";"
        | "return" expr? ";"
        | "if" "(" expr ")" stmt ("else" stmt)?
        | "switch"  "(" expr ")" "{"
            ((("case" (num | string)) | "default") ":" stmt*)* "}"
        | "while" "(" expr ")" stmt
        | "for" "(" expr? ";" expr? ";" expr? ")" stmt
        | "break" ";"
        | "continue" ";"
        | expr ";"
        | ";"
expr       = comma
comma      = assign ("," assign)*
assign     = condition (("=" | "+=" | "-=" | "*=" | "/="
            | "%=" | "&=" | "^=" | "|=" | "<<=" | ">>=") assign)?
condition  = logicOR ("?" expr ":" condition)? # 中央はカンマ演算子などもOK a?b,c:d → a?(b,c):d と解釈
logicOR    = logicAND ("||" logicAND)*
logicAND   = bitOR ("&&" bitOR)*
bitOR      = bitXOR ("|" bitXOR)*
bitXOR     = bitAND ("^" bitAND)*
bitAND     = equality ("&" equality)*
equality   = relational ("==" relational | "!=" relational)*
relational = shift (("<" | "<=" | ">" | ">=") shift)*
shift      = add ("<<" add | ">>" add)*
add        = mul ("+" mul | "-" mul)*
mul        = unary (("*" | "/" | "%") unary)*
unary      = ("sizeof" unary | sizeof "(" TYPE ")")
            | ("&" | "*" | # TODO ("(" TYPE ")")
                | "!" | "~" | "++" | "--") unary  # ++ -- は前置
            |  ("+" | "-")? postpos
postpos    = primary (("[" expr "]") || ("." ident) || ("->" ident))*
            ("++" | "--")?  # ++ -- は後置
primary    = "(" expr ")" | string
            | ident "(" (assign ("," assign)*)? ")" # commaとの衝突を避けるためassign
            | ident | num


# TODO:int/char以外の型,配列型や関数ポインタ型の整理
TYPE       = ("int" | "char" | ("struct" ident) | ("enum" ident)
            | definedtype) "*"*


# TODO:関数ポインタ(関数呼び出しを演算子化,関数名部分を評価してから関数呼び出し)
# TODO:int,char以外の型(long,short),unsigned,キャスト
# TODO:複数変数の宣言 int x,y; (ポインタの仕様に注意)
# TODO:エスケープ文字,extern,void,プロトタイプ宣言のテスト
# TODO:ローカル変数に配列やstructを使えない(ポインタのみ)
# TODO:プリプロセッサ処理(#include,#define)
# TODO:定数はパーサ時に計算できる(両辺がNUMなら計算結果をノードに)

# TODO:ブロックスコープ
# BLOCKまたは関数定義のNodeにLVar *localsを持たせ, 変数が使われるときは
# Nodeのツリーを上向きに遡ってローカル変数定義を探す
# →①Nodeのツリーに親へのポインタを持たせる
# ②変数定義(Rspを下げる,localsへの登録等)はパース時ではなくgenで行う
# TODO:for内での宣言 for(int i=0; ...)
