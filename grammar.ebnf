program    = function_gval*
function_gval =   typed_ident "{" stmt* "}" # 関数定義
                | typed_ident ";" # プロトタイプ宣言
                | typed_ident ("=" ("{" (num ("," num)*)? "}") | num | string )? ";" # GValDef
                | "extern" typed_ident ";"
                | define_enum  ";"
                | define_struct ";"
                | "typedef" (typed_ident | (define_enum ident) | (define_struct ident))  ";"
define_enum = "enum" ident "{" ident ("," ident)* "}"
define_struct = "struct" ident "{" (typed_ident ";")* "}"
typed_ident = ("int" | "char" | "void" | "enum" ident | "struct" ident | definedtype)
                "*"* (ident? | "(" typed_ident ")")
                ( ("(" (typed_ident ("," typed_ident))? ")")  | ("[" num? "]")*)
local_val_def = typed_ident ("=" ("{" (num ("," num))? "}") | num | string )? ";"
stmt =    "{" stmt* "}"
        | local_val_def
        | "return" expr? ";"
        | "if" "(" expr ")" stmt ("else" stmt)?
        | "switch"  "(" expr ")" "{"
            ((("case" (num | string)) | "default") ":" stmt*)* "}"
        | "while" "(" expr ")" stmt
        | "for" "(" (local_val_def | (expr? ";")) expr? ";" expr? ")" stmt
        | "break" ";"
        | "continue" ";"
        | expr ";"
        | ";"
expr       = comma
comma      = assign ("," assign)*
assign     = condition (("=" | "+=" | "-=" | "*=" | "/="
            | "%=" | "&=" | "^=" | "|=" | "<<=" | ">>=") assign)?
condition  = logicOR ("?" expr ":" condition)? # 中央はカンマ演算子などもOK a?b,c:d → a?(b,c):d と解釈
logicOR    = logicAND ("||" logicAND)*
logicAND   = bitOR ("&&" bitOR)*
bitOR      = bitXOR ("|" bitXOR)*
bitXOR     = bitAND ("^" bitAND)*
bitAND     = equality ("&" equality)*
equality   = relational ("==" relational | "!=" relational)*
relational = shift (("<" | "<=" | ">" | ">=") shift)*
shift      = add ("<<" add | ">>" add)*
add        = mul ("+" mul | "-" mul)*
mul        = unary (("*" | "/" | "%") unary)*
unary      = ("sizeof" unary) | ("sizeof" "(" typed_ident ")")
            | ("&" | "*" | "(" typed_ident ")" # キャスト演算子
                | "!" | "~" | "++" | "--") unary  # ++ -- は前置
            |  ("+" | "-")? postpos
postpos    = primary (("[" expr "]") | ("." ident) | ("->" ident) |
            "(" (assign ("," assign)*)? ")" )*
            ("++" | "--")?  # ++ -- は後置
primary    = "(" expr ")" | string | ident | num


# TODO:int,char以外の型(long,short),unsigned

# TODO:複数変数の宣言 int x,y; (ポインタの仕様に注意)

# TODO:char[][] (文字列の配列)→tokenizeやcodegenなどの一部をforで簡略化

# TODO:プリプロセッサ処理(#include,#define)
# tokenize→プリプロセッサ→#includeのトークンが来たらread_fileしてtokenizeする再帰で
# マクロ展開できる #defineなら#defineリストを作って置換
# プリプロセス: プリプロセッサはトークンのリストを入力として受け取り、マクロ展開されたトークンの新しいリストを出力します。プリプロセッサはマクロを展開しながらプリプロセッサディレクティブを解釈します。

# TODO:ローカル変数に配列やstructを使えない(ポインタのみ)